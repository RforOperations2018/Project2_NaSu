group <- seq_along(rand.index)%%k
chunk <- split(rand.index, group)
return(chunk)
}
# ## function to prepare the predict and true list by SVM model
# library(e1071)
# svm_do_cv_class <- function(df, num_folds) {
#   results <- data.frame(predicted = c(NA),true = c(NA))
#     nn <- nrow(df)
#     nf <- ncol(df)
#     folds <- get_folds(nn, num_folds)
#     score <- rep(NA, length(folds))
#     for (ii in 1:length(folds)) {
#         test.index <- folds[[ii]]
#         train.data <- df[-test.index, ]
#         test.data <- df[test.index, ]
#           results <- rbind(results, get_pred_svm(train.data,test.data))
#     }
#   results <- results[-1,]
#   return (results)
# }
#
# ##calculate the RSS for SVM model
# four_input_data <- subset(result, select = c(Time_Block_Evening, Destination_Airport_ID_JFK, Carrier_Code_DL, Month_2,Dep_Delay))
# Predict_true_data <- svm_do_cv_class(four_input_data,10) ## it takes 5 mins to run it
# Predict_true_data
# options(scipen = 4)
# substraction <- Predict_true_data[1]-Predict_true_data[2]
# options(scipen = 10)
# substraction
# substraction^2
# sum(substraction^2) ## very large!!
mvm.fit_2
mvm.fit_2$coefficients
sum(mvm.fit_2$coefficients)
library(ggplot2)
library(plyr)
library(knitr)
library(MASS)
library(boot)
library(caret)
library(splines)
library (dplyr)
library(stringr)
library(fastDummies)
raw_1<-read.csv("./2017-7.csv", header = TRUE)
raw_2<-read.csv("./2017-8.csv", header = TRUE)
raw_3<-read.csv("./2017-9.csv", header = TRUE)
raw_4<-read.csv("./2017-10.csv", header = TRUE)
raw_5<-read.csv("./2017-11.csv", header = TRUE)
raw_6<-read.csv("./2017-12.csv", header = TRUE)
raw_7<-read.csv("./2018-1.csv", header = TRUE)
raw_8<-read.csv("./2018-2.csv", header = TRUE)
raw_9<-read.csv("./2018-3.csv", header = TRUE)
raw_10<-read.csv("./2018-4.csv", header = TRUE)
raw_11<-read.csv("./2018-5.csv", header = TRUE)
raw_12<-read.csv("./2018-6.csv", header = TRUE)
raw_13<-read.csv("./2018-7.csv", header = TRUE)
raw<-rbind(raw_1,raw_2,raw_3,raw_4,raw_5,raw_6,raw_7,raw_8,raw_9,raw_10,raw_11,raw_12,raw_13)
Pitt_data<- subset(raw, str_detect(str_to_upper(ORIGIN_CITY_NAME),"PITTSBURGH"))
###Exclude the cancelled flights =1 and diverted =1
Pitt_data<-subset(Pitt_data,CANCELLED != 1 & DIVERTED !=1 & DEP_DELAY>0)
###Creating the aggregate delay time
Pitt_data$REASONS<-rowSums(Pitt_data[,57:61]!= 0 )
###Create Label (list of reasons for delay)
Pitt_data$LABELS<- simplify2array(
apply(
Pitt_data[,57:61], 1,
function(x) paste(names(Pitt_data[,57:61])[x != 0], collapse = ",")
)
)
###Filter the data we need to 54 columns
Pitt_data <- dplyr::select(Pitt_data,YEAR,MONTH,DAY_OF_MONTH,FL_DATE,OP_UNIQUE_CARRIER,
OP_CARRIER_AIRLINE_ID,TAIL_NUM,OP_CARRIER_FL_NUM,
ORIGIN,ORIGIN_CITY_NAME,ORIGIN_STATE_ABR,DEST,
DEST_CITY_NAME,DEST_STATE_ABR,CRS_DEP_TIME,
DEP_TIME,DEP_DELAY,DEP_TIME_BLK,CRS_ARR_TIME,ARR_TIME,ARR_DELAY,
ARR_TIME_BLK,CRS_ELAPSED_TIME,ACTUAL_ELAPSED_TIME,AIR_TIME,DISTANCE, REASONS, LABELS)
ncol(Pitt_data)
names(Pitt_data) <- c("Year","Month","Day","Flight_Date","Carrier_Code","Airline_ID",
"Tail_Num","Flight_Num","Origin_Airport_ID","Origin_City","Origin_State", "Destination_Airport_ID",
"Destination_City","Destination_State","Scheduled_Dep_Time","Actual_Dep_Time",
"Dep_Delay","Dep_Time_Block","Scheduled_Arr_Time","Actual_Arr_Time",
"Arr_Delay","Arr_Time_Block","Scheduled_Elapsed_Time","Actual_Elapsed_Time",
"Air_Time","Distance","Reasons","Type_of_delay"
)
Time_Mapping<- data.frame(Dep_Time_Block = c("0600-0659","0700-0759","0800-0859",
"0900-0959","1000-1059","1100-1159",
"1200-1259","1300-1359","1400-1459",
"1400-1459","1500-1559","1600-1659",
"1700-1759","1800-1859","1900-1959",
"2000-2059","2100-2159","2200-2259",
"2300-2359","0001-0559"),
Time_Block = c("Morning","Morning","Morning",
"Morning","Early_Afternoon","Early_Afternoon",
"Early_Afternoon","Early_Afternoon",
"Evening","Evening","Evening","Evening",
"Evening","Night","Night","Night","Night",
"Midnight","Midnight","Midnight" ))
Pitt_data_test<-merge.data.frame(Pitt_data, Time_Mapping, by = 'Dep_Time_Block',
all = TRUE)
Carrier_Mapping<- data.frame(Carrier_Code = c("9E", "AA", "B6", "DL",
"EV", "F9", "G4", "MQ", "NK", "OH", "OO", "UA", "WN", "YV", "YX"),
Carrier_Name = c("Pinnacle","American","JetBlue",
"Delta","Atlantic_Southeast","Frontier",
"Allegiant ","American_Eagle",
"Spirit","Comair","SkyWest","United",
"Southwest","Mesa","Republic"))
Pitt_data_test<-merge.data.frame(Pitt_data_test, Carrier_Mapping, by = 'Carrier_Code',
all = TRUE)
###Transposing Columns
result<-fastDummies::dummy_cols(Pitt_data_test, select_columns=c("Time_Block", "Destination_Airport_ID",
"Carrier_Code", "Month"))
colnames(result)
#4958.2
set.seed(1000)
mvm.fit <- glm(Dep_Delay ~ Month_1 + Month_2 + Month_3 + Month_4 + Month_5 + Month_6 +
Month_7 + Month_8 + Month_9 + Month_10 + Month_11 + Month_12 + Year, data = result)
print(kable(coef(summary(mvm.fit)), digits = c(4, 5, 2, 4)))
cv10.error <- cv.glm(data = result, glmfit = mvm.fit, K=10)  # Runs 10 Fold CV on Boston
PE<-cv10.error$delta[2]     # RSS error
##Higher the p value less the signiface they have -> drop "Month 3, 9, 10 and 11
## NA in month 12
mvm.fit <- glm(Dep_Delay ~ Time_Block_Night + Time_Block_Morning + Time_Block_Early_Afternoon +
Time_Block_Evening + Time_Block_Midnight, data = result)
summary(mvm.fit)
print(kable(coef(summary(mvm.fit)), digits = c(4, 5, 2, 4)))
##Higher the p value less the signiface they have -> drop Early Afternoon
## NA in month 12
###---Export the filtered data
##write.csv(Pitt_data, "C:/Users/Avi/Documents/Classroom Summer/Fall/Data Mining/Project/Data/newdatasets_PA/Pitt_data.csv")
# mvm.fit <- lm(Dep_Delay ~Time_Block_Night+Time_Block_Early_Afternoon+Time_Block_Evening+ Time_Block_Morning+Time_Block_Midnight +
#                 Destination_Airport_ID_BOS
#                +Destination_Airport_ID_DTW+ Destination_Airport_ID_LGA + Destination_Airport_ID_MSP + Destination_Airport_ID_JFK
#               +Destination_Airport_ID_MCO
#                +Destination_Airport_ID_CLT + Destination_Airport_ID_PHL + Destination_Airport_ID_DFW+ Destination_Airport_ID_ORD +
#                 Destination_Airport_ID_PHX
#                +Destination_Airport_ID_FLL+ Destination_Airport_ID_ATL+ Destination_Airport_ID_SLC+ Destination_Airport_ID_EWR+
#                 Destination_Airport_ID_IAH
#                +Destination_Airport_ID_DEN + Destination_Airport_ID_LAS + Destination_Airport_ID_SFB + Destination_Airport_ID_MYR
#                +Destination_Airport_ID_JAX + Destination_Airport_ID_SAV + Destination_Airport_ID_PIE + Destination_Airport_ID_SRQ +
#                 Destination_Airport_ID_PGD
#                +Destination_Airport_ID_AUS+ Destination_Airport_ID_MSY+ Destination_Airport_ID_CHS+
#                 Destination_Airport_ID_VPS+Destination_Airport_ID_MIA
#                +Destination_Airport_ID_RDU + Destination_Airport_ID_LAX + Destination_Airport_ID_RSW + Destination_Airport_ID_TPA+
#                 Destination_Airport_ID_DCA
#                +Destination_Airport_ID_SFO+Destination_Airport_ID_IAD+Destination_Airport_ID_MDW+Destination_Airport_ID_STL
#               +Destination_Airport_ID_BWI
#                +Destination_Airport_ID_DAL+Destination_Airport_ID_HOU+Destination_Airport_ID_BNA +Carrier_Code_9E
#                +Carrier_Code_AA+Carrier_Code_B6 + Carrier_Code_DL + Carrier_Code_EV + Carrier_Code_F9  + Carrier_Code_G4 + Carrier_Code_MQ
#                +Carrier_Code_NK +Carrier_Code_OH + Carrier_Code_OO+Carrier_Code_UA +Carrier_Code_WN + Carrier_Code_YV + Carrier_Code_YX
#               +Month_1 +Month_3 +Month_5
#                +Month_2+Month_6+Month_4+Month_7+Month_10+Month_12+Month_8+Month_11+Month_9, data = result)
# summary(mvm.fit)
# mvm.fit_TimeBlock <- lm(Dep_Delay ~Time_Block_Night+Time_Block_Early_Afternoon+Time_Block_Evening+ Time_Block_Morning+Time_Block_Midnight, data = result)
# summary(mvm.fit_TimeBlock)
#
# mvm.fit_month <- lm(Dep_Delay ~ Month_1 +Month_3 +Month_5
#                +Month_2+Month_6+Month_4+Month_7+Month_10+Month_12+Month_8+Month_11+Month_9, data = result)
# summary(mvm.fit_month)
# mvm.fit_Airport <- lm(Dep_Delay ~ Destination_Airport_ID_BOS
#                +Destination_Airport_ID_DTW+ Destination_Airport_ID_LGA + Destination_Airport_ID_MSP + Destination_Airport_ID_JFK
#                +Destination_Airport_ID_MCO
#                +Destination_Airport_ID_CLT + Destination_Airport_ID_PHL + Destination_Airport_ID_DFW+ Destination_Airport_ID_ORD + Destination_Airport_ID_PHX
#                +Destination_Airport_ID_FLL+ Destination_Airport_ID_ATL+ Destination_Airport_ID_SLC+ Destination_Airport_ID_EWR+ Destination_Airport_ID_IAH
#                +Destination_Airport_ID_DEN + Destination_Airport_ID_LAS + Destination_Airport_ID_SFB + Destination_Airport_ID_MYR
#                +Destination_Airport_ID_JAX + Destination_Airport_ID_SAV + Destination_Airport_ID_PIE + Destination_Airport_ID_SRQ + Destination_Airport_ID_PGD
#                +Destination_Airport_ID_AUS+ Destination_Airport_ID_MSY+ Destination_Airport_ID_CHS+ Destination_Airport_ID_VPS+Destination_Airport_ID_MIA
#                +Destination_Airport_ID_RDU + Destination_Airport_ID_LAX + Destination_Airport_ID_RSW + Destination_Airport_ID_TPA+ Destination_Airport_ID_DCA
#                +Destination_Airport_ID_SFO+Destination_Airport_ID_IAD+Destination_Airport_ID_MDW+Destination_Airport_ID_STL +Destination_Airport_ID_BWI
#                +Destination_Airport_ID_DAL+Destination_Airport_ID_HOU+Destination_Airport_ID_BNA , data = result)
# summary(mvm.fit)
##
## Run linear regression on four input variable, the RSS is 4995.332
mvm.fit_1 <- glm(Dep_Delay ~ Time_Block_Evening + Destination_Airport_ID_JFK + Carrier_Code_DL + Month_2, data = result)
cv10.error1 <- cv.glm(data = result, glmfit = mvm.fit_1, K=10)
PE_1<-cv10.error1$delta[2]
PE_1
##Run linear regression on four input variable, the RSS is 4892.708
mvm.fit_2 <- glm(Dep_Delay ~ Time_Block_Night + Destination_Airport_ID_LGA + Carrier_Code_AA + Month_5, data = result)
cv10.error2 <- cv.glm(data = result, glmfit = mvm.fit_2, K=10)
PE_2<-cv10.error2$delta[2]
PE_2
sum(mvm.fit_2$coefficients)
## Run svm on four input variable,but doesn' work. It seems the output variable needs to be binary
# library(caret)
# ctrl <- trainControl(method = "cv", number = 10, savePred=T, classProb=T)
# Fit_Pridict_svm_cv <- train(Dep_Delay ~ Time_Block_Evening + Destination_Airport_ID_JFK + Carrier_Code_DL + Month_2, data = result,
#              method = "svmLinear", trControl = ctrl)
# Fit_Pridict_svm_cv ## doesn't work !
##SVM model
get_pred_svm <- function(train, test) {
colnames(train)[ncol(train)] <- "y"
colnames(test)[ncol(test)] <- "y"
svm_model <- svm(y ~ .,data = train)
svm_predict <- predict(svm_model, test)
svm_true <- test$y
svm_predict_true_data <- data.frame(predicted = svm_predict,true = svm_true)
return(svm_predict_true_data)
}
get_folds <- function(nn, k) {
index <- seq(1, nn)
rand.index <- sample(index, nn)
group <- seq_along(rand.index)%%k
chunk <- split(rand.index, group)
return(chunk)
}
# ## function to prepare the predict and true list by SVM model
# library(e1071)
# svm_do_cv_class <- function(df, num_folds) {
#   results <- data.frame(predicted = c(NA),true = c(NA))
#     nn <- nrow(df)
#     nf <- ncol(df)
#     folds <- get_folds(nn, num_folds)
#     score <- rep(NA, length(folds))
#     for (ii in 1:length(folds)) {
#         test.index <- folds[[ii]]
#         train.data <- df[-test.index, ]
#         test.data <- df[test.index, ]
#           results <- rbind(results, get_pred_svm(train.data,test.data))
#     }
#   results <- results[-1,]
#   return (results)
# }
#
# ##calculate the RSS for SVM model
# four_input_data <- subset(result, select = c(Time_Block_Evening, Destination_Airport_ID_JFK, Carrier_Code_DL, Month_2,Dep_Delay))
# Predict_true_data <- svm_do_cv_class(four_input_data,10) ## it takes 5 mins to run it
# Predict_true_data
# options(scipen = 4)
# substraction <- Predict_true_data[1]-Predict_true_data[2]
# options(scipen = 10)
# substraction
# substraction^2
# sum(substraction^2) ## very large!!
mvm.fit_svm <- svm(Dep_Delay ~ Time_Block_Night + Destination_Airport_ID_LGA + Carrier_Code_AA + Month_5, data = result)
mvm.fit_svm
data_svm <- data.frame(Time_Block_Night = 1, Destination_Airport_ID_LGA =1, Carrier_Code_AA = 1,  Month_5 = 1)
mvm.fit_svm <- svm(Dep_Delay ~ Time_Block_Night + Destination_Airport_ID_LGA + Carrier_Code_AA + Month_5, data = result)
data_svm <- data.frame(Time_Block_Night = 1, Destination_Airport_ID_LGA =1, Carrier_Code_AA = 1,  Month_5 = 1)
Dep_delay_svm <- predict(mvm.fit_svm, data_svm)
Dep_delay_svm
dd <- read.csv("./Allegheny_County_Hydrology_Areas.csv")
dd <- read.csv("./Allegheny_County_Hydrology_Areas.csv")
dd <- read.csv("Allegheny_County_Hydrology_Areas.csv")
setwd("C:/Users/sunas/Desktop/Courses/R shiny/Project2_NaSu")
dd <- read.csv("C:/Users/sunas/Desktop/Courses/R shiny/Project2_NaSu/Allegheny_County_Hydrology_Areas.csv")
pal22 <- colorFactor(c("#8c510a","#bf812d","#dfc27d","#f6e8c3","#c7eae5","#80cdc1","#35978f","#01665e"),unique(FEATURECOD_column))
dd <- read.csv("C:/Users/sunas/Desktop/Courses/R shiny/Project2_NaSu/Allegheny_County_Hydrology_Areas.csv")
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = polygondata ,lng = ~SHAPE_area, lat = ~SHAPE_len, color = ~pal22(FEATURECOD))
pal22 <- colorFactor(c("#8c510a","#bf812d","#dfc27d","#f6e8c3","#c7eae5","#80cdc1","#35978f","#01665e"),unique(FEATURECOD_column))
dd <- read.csv("C:/Users/sunas/Desktop/Courses/R shiny/Project2_NaSu/Allegheny_County_Hydrology_Areas.csv")
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = dd ,lng = ~SHAPE_area, lat = ~SHAPE_len, color = ~pal22(FEATURECOD))
pal22 <- colorFactor(c("#8c510a","#bf812d","#dfc27d","#f6e8c3","#c7eae5","#80cdc1","#35978f","#01665e"),unique(FEATURECOD_column))
dd <- read.csv("C:/Users/sunas/Desktop/Courses/R shiny/Project2_NaSu/Allegheny_County_Hydrology_Areas.csv")
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = dd ,lng = ~SHAPE_len, lat = ~SHAPE_area, color = ~pal22(FEATURECOD))
dd <- readOGR("C:/Users/sunas/Desktop/Courses/R shiny/Project2_NaSu/Allegheny_County_Hydrology_Areas.shp", layer = "Allegheny_County_Hydrology_Areas.shp")
dd <- readOGR("./Allegheny_County_Hydrology_Areas.shp", layer = "Allegheny_County_Hydrology_Areas.shp")
dd <- readOGR("./Allegheny_County_Hydrology_Areas.shp", layer = "Allegheny_County_Hydrology_Areas.shp")
require(rgdal)
dd <- readOGR("./Allegheny_County_Hydrology_Areas.shp", layer = "Allegheny_County_Hydrology_Areas.shp")
ll <- readOGR("./Allegheny_County_Hydrology_Areas.shp", layer = "Allegheny_County_Hydrology_Areas.shp")
ll <- readOGR("./Allegheny_County_Hydrology_Areas.shp")
ll <- readOGR(dsn = "./Allegheny_County_Hydrology_Areas.shp", layer = "Allegheny_County_Hydrology_Areas.shp")
ll <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas.shp"), layer = "Allegheny_County_Hydrology_Areas.shp")
ll <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
ll
str(ll)
summary(ll)
ll <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll ,lng = ~SHAPE_len, lat = ~SHAPE_area, color = ~pal22(FEATURECOD))
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD))
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD))%>%
addLegend(position = "topright", pal = pal22, values = ~FEATURECOD)
unique(FEATURECOD_column)
class(unique(FEATURECOD_column))
pal22 <- colorFactor(c("#8c510a","#bf812d","#dfc27d","#f6e8c3","#c7eae5","#80cdc1","#35978f","#01665e"),c("0","410", "420", "430", "450","460", "470", "520"))
ll <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD))%>%
addLegend(position = "topright", pal = pal22, values = ~FEATURECOD)
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD))
addLegend(position = "topright", pal = pal22, values = ~FEATURECOD)
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD))
addLegend(data = ll, position = "topright", pal = pal22, values = ~FEATURECOD)
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD))  %>%
addLegend(data = ll, position = "topright", pal = pal22, values = ~FEATURECOD)
ee <- read.csv("./Allegheny_County_Dam_Locations.csv")
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD))  %>%
addLegend(data = ll, position = "topright", pal = pal22, values = ~FEATURECOD)
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(data = ee, position = "topright" , pal = pal311, values = ee$TYPE, title = "TYPE")
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD))  %>%
addLegend(data = ll, position = "topright", pal = pal22, values = ~FEATURECOD)
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(data = ee, position = "downright" , pal = pal311, values = ee$TYPE, title = "TYPE")
summary(ee)
head(ee)
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD))  %>%
addLegend(data = ll, position = "topright", pal = pal22, values = ~FEATURECOD)
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE))
addLegend(data = ee, position = "downright" , pal = pal311, values = ee$TYPE, title = "TYPE")
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD))
addLegend(data = ll, position = "topright", pal = pal22, values = ~FEATURECOD)
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE))
addLegend(data = ee, position = "bottomright" , pal = pal311, values = ee$TYPE, title = "TYPE")
ee <- read.csv("./Allegheny_County_Dam_Locations.csv")
ee <- readOGR(dsn = path.expand("./Allegheny_County_Dam_Locations"), layer = "Allegheny_County_Dam_Locations")
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD))
addLegend(data = ll, position = "topright", pal = pal22, values = ~FEATURECOD)
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE))
addLegend(data = ee, position = "bottomright" , pal = pal311, values = ee$TYPE, title = "TYPE")
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD)) %>%
addLegend(data = ll, position = "topright", pal = pal22, values = ~FEATURECOD)
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(data = ee, position = "bottomright" , pal = pal311, values = ee$TYPE, title = "TYPE")
summary(ee)
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD)) %>%
addLegend(data = ll, position = "topright", pal = pal22, values = ~FEATURECOD)
addCircleMarkers(data = ee, lng = ~coords.x1, lat = ~coords.x2, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(data = ee, position = "bottomright" , pal = pal311, values = ee$TYPE, title = "TYPE")
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD)) %>%
addLegend(data = ll, position = "topright", pal = pal22, values = ~FEATURECOD)
addCircleMarkers(data = ee, lng = ~x1, lat = ~x2, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(data = ee, position = "bottomright" , pal = pal311, values = ee$TYPE, title = "TYPE")
summary(ee)
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD)) %>%
addLegend(data = ll, position = "topright", pal = pal22, values = ~FEATURECOD)
addCircleMarkers(data = ee, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(data = ee, position = "bottomright" , pal = pal311, values = ee$TYPE, title = "TYPE")
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD)) %>%
addLegend(data = ll, position = "topright", pal = pal22, values = ~FEATURECOD)
addCircleMarkers(data = ee, lng = X, lat = Y, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(data = ee, position = "bottomright" , pal = pal311, values = ee$TYPE, title = "TYPE")
leaflet(data = ee) %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(data = ee, position = "bottomright" , pal = pal311, values = ee$TYPE, title = "TYPE")
addPolygons(data = ll , color = ~pal22(FEATURECOD)) %>%
addLegend(data = ll, position = "topright", pal = pal22, values = ~FEATURECOD)
leaflet(data = ee) %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(position = "bottomright" , pal = pal311, values = ee$TYPE, title = "TYPE")
addPolygons(data = ll , color = ~pal22(FEATURECOD)) %>%
addLegend(position = "topright", pal = pal22, values = ~FEATURECOD)
leaflet(data = ee) %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(position = "bottomright" , pal = pal311, values = ee$TYPE, title = "TYPE")
addPolygons(data = ll , color = ~pal22(FEATURECOD)) %>%
addLegend(position = "topright", pal = pal22, values = ~FEATURECOD)
leaflet(data = ee) %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(position = "bottomright" , pal = pal311, values = ee$TYPE, title = "TYPE")
addPolygons(data = ll , color = ~pal22(FEATURECOD)) %>%
addLegend(position = "topright", pal = pal22, values = ~FEATURECOD)
leaflet(data = ee) %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(position = "bottomright" , pal = pal311, values = ee$TYPE, title = "TYPE")
addPolygons(data = ll , color = ~pal22(FEATURECOD)) %>%
addLegend(position = "topright", pal = pal22, values = ~FEATURECOD)
leaflet(data = ee) %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(position = "bottomright" , pal = pal311, values = ee$TYPE, title = "TYPE")
addPolygons(data = ll , color = ~pal22(FEATURECOD)) %>%
addLegend(position = "topright", pal = pal22, values = ~FEATURECOD)
leaflet(data = ee) %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(position = "bottomright" , pal = pal311, values = ee$TYPE, title = "TYPE")%>%
addPolygons(data = ll , color = ~pal22(FEATURECOD)) %>%
addLegend(position = "topright", pal = pal22, values = ~FEATURECOD)%>%
leaflet(data = ee) %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(position = "bottomright" , pal = pal311, values = ee$TYPE, title = "TYPE")%>%
addPolygons(data = ll , color = ~pal22(FEATURECOD)) %>%
addLegend(position = "topright", pal = pal22, values = ~FEATURECOD)%>%
leaflet(data = ee) %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(position = "topright" , pal = pal311, values = ee$TYPE, title = "TYPE")%>%
addPolygons(data = ll , color = ~pal22(FEATURECOD)) %>%
addLegend(position = "bottomright", pal = pal22, values = ~FEATURECOD)%>%
leaflet(data = ee) %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(data = ee, position = "topright" , pal = pal311, values = ee$TYPE, title = "TYPE")%>%
addPolygons(data = ll , color = ~pal22(FEATURECOD)) %>%
addLegend(data = ll,position = "bottomright", pal = pal22, values = ~FEATURECOD)
Hydrology_Areas <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
Hydrology_Areas <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
Hydrology_lines <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Lines"), layer = "Allegheny_County_Hydrology_Lines")
table(Hydrology_lines$FEATURECOD)
Hydrology_Areas <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolylons(data = Hydrology_Areas, color = ~pal22(FEATURECOD))%>%
addLegend(data = Hydrology_Areas,position = "bottomright", pal = pal22, values = ~FEATURECOD) %>%
Hydrology_Areas <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
table(Hydrology_Areas$FEATURECOD)
pal22 <- colorFactor(c("#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494"),c("0","410", "420", "430", "450","460", "470", "520"))
pal22 <- colorFactor(c("#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494"),c("0","410", "420", "430", "450","460", "470", "520"))
Hydrology_Areas <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
table(Hydrology_Areas$FEATURECOD)
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolylons(data = Hydrology_Areas, color = ~pal22(FEATURECOD))%>%
addLegend(data = Hydrology_Areas,position = "bottomright", pal = pal23, values = ~FEATURECOD) %>%
pal23 <- colorFactor(c("#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494"),c("0","410", "420", "430", "450","460", "470", "520"))
Hydrology_Areas <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
table(Hydrology_Areas$FEATURECOD)
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolylons(data = Hydrology_Areas, color = ~pal22(FEATURECOD))%>%
addLegend(data = Hydrology_Areas,position = "bottomright", pal = pal23, values = ~FEATURECOD) %>%
pal23 <- colorFactor(c("#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494"),c("0","410", "420", "430", "450","460", "470", "520"))
Hydrology_Areas <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
table(Hydrology_Areas$FEATURECOD)
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolylons(data = Hydrology_Areas, color = ~pal22(FEATURECOD))%>%
addLegend(data = Hydrology_Areas,position = "bottomright", pal = pal23, values = ~FEATURECOD)
pal23 <- colorFactor(c("#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494"),c("0","410", "420", "430", "450","460", "470", "520"))
Hydrology_Areas <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
table(Hydrology_Areas$FEATURECOD)
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolylon(data = Hydrology_Areas, color = ~pal22(FEATURECOD))%>%
addLegend(data = Hydrology_Areas,position = "bottomright", pal = pal23, values = ~FEATURECOD)
pal23 <- colorFactor(c("#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494"),c("0","410", "420", "430", "450","460", "470", "520"))
Hydrology_Areas <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
table(Hydrology_Areas$FEATURECOD)
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = Hydrology_Areas, color = ~pal22(FEATURECOD))%>%
addLegend(data = Hydrology_Areas,position = "bottomright", pal = pal23, values = ~FEATURECOD)
pal23 <- colorFactor(c("#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494"),c("0","410", "420", "430", "450","460", "470", "520"))
Hydrology_Areas <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
table(Hydrology_Areas$FEATURECOD)
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolylines(data = Hydrology_Areas, color = ~pal22(FEATURECOD))%>%
addLegend(data = Hydrology_Areas,position = "bottomright", pal = pal23, values = ~FEATURECOD)
Hydrology_Areas.load <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
class(Hydrology_Areas.load$SHAPE_area)
class(Hydrology_Areas.load$SHAPE_len)
Hydrology_Areas.load <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
areas_Input <- reactive({
# Building an IN selector
# TYPE_filter <- ifelse(length(input$TYPESelect) > 0,
#                         paste0("%20%22TYPE%22%20IN%20(%27", paste(input$TYPESelect, collapse = "%27,%27"),"%27)"),
#                         "")
# DAM_HEIGHT_filter <- ifelse(length(input$DAM_HEIGHTSelect) > 0,
#                           paste0("%20AND%20%22DAM_HEIGHT%22%20BETWEEN%20%27", paste(input$DAM_HEIGHTSelect, collapse = "%27AND%27"),"%27"),
#                           "")
# Build API Query with proper encodes
# url <- paste0("https://data.wprdc.org/api/action/datastore_search_sql?sql=SELECT%20*%20FROM%20%22e500cd8b-aa04-4845-a77f-c93b6dfa86b0%22%20WHERE",TYPE_filter,DAM_HEIGHT_filter)
#
# Load and clean data
# print(url)
Hydrology_Areas <-  Hydrology_Areas.load
if (length(input$FEATURECODSelect) > 0) {
Hydrology_Areas <- subset(Hydrology_Areas, FEATURECOD %in% input$FEATURECODSelect)
}
return(Hydrology_Areas)
})
Hydrology_Areas <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
setwd("C:/Users/sunas/Desktop/Courses/R shiny/Project2_NaSu")
