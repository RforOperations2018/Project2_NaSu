##Run linear regression on four input variable, the RSS is 4892.708
mvm.fit_2 <- glm(Dep_Delay ~ Time_Block_Night + Destination_Airport_ID_LGA + Carrier_Code_AA + Month_5, data = result)
cv10.error2 <- cv.glm(data = result, glmfit = mvm.fit_2, K=10)
PE_2<-cv10.error2$delta[2]
PE_2
sum(mvm.fit_2$coefficients)
## Run svm on four input variable,but doesn' work. It seems the output variable needs to be binary
# library(caret)
# ctrl <- trainControl(method = "cv", number = 10, savePred=T, classProb=T)
# Fit_Pridict_svm_cv <- train(Dep_Delay ~ Time_Block_Evening + Destination_Airport_ID_JFK + Carrier_Code_DL + Month_2, data = result,
#              method = "svmLinear", trControl = ctrl)
# Fit_Pridict_svm_cv ## doesn't work !
##SVM model
get_pred_svm <- function(train, test) {
colnames(train)[ncol(train)] <- "y"
colnames(test)[ncol(test)] <- "y"
svm_model <- svm(y ~ .,data = train)
svm_predict <- predict(svm_model, test)
svm_true <- test$y
svm_predict_true_data <- data.frame(predicted = svm_predict,true = svm_true)
return(svm_predict_true_data)
}
get_folds <- function(nn, k) {
index <- seq(1, nn)
rand.index <- sample(index, nn)
group <- seq_along(rand.index)%%k
chunk <- split(rand.index, group)
return(chunk)
}
# ## function to prepare the predict and true list by SVM model
# library(e1071)
# svm_do_cv_class <- function(df, num_folds) {
#   results <- data.frame(predicted = c(NA),true = c(NA))
#     nn <- nrow(df)
#     nf <- ncol(df)
#     folds <- get_folds(nn, num_folds)
#     score <- rep(NA, length(folds))
#     for (ii in 1:length(folds)) {
#         test.index <- folds[[ii]]
#         train.data <- df[-test.index, ]
#         test.data <- df[test.index, ]
#           results <- rbind(results, get_pred_svm(train.data,test.data))
#     }
#   results <- results[-1,]
#   return (results)
# }
#
# ##calculate the RSS for SVM model
# four_input_data <- subset(result, select = c(Time_Block_Evening, Destination_Airport_ID_JFK, Carrier_Code_DL, Month_2,Dep_Delay))
# Predict_true_data <- svm_do_cv_class(four_input_data,10) ## it takes 5 mins to run it
# Predict_true_data
# options(scipen = 4)
# substraction <- Predict_true_data[1]-Predict_true_data[2]
# options(scipen = 10)
# substraction
# substraction^2
# sum(substraction^2) ## very large!!
mvm.fit_svm <- svm(Dep_Delay ~ Time_Block_Night + Destination_Airport_ID_LGA + Carrier_Code_AA + Month_5, data = result)
mvm.fit_svm
data_svm <- data.frame(Time_Block_Night = 1, Destination_Airport_ID_LGA =1, Carrier_Code_AA = 1,  Month_5 = 1)
mvm.fit_svm <- svm(Dep_Delay ~ Time_Block_Night + Destination_Airport_ID_LGA + Carrier_Code_AA + Month_5, data = result)
data_svm <- data.frame(Time_Block_Night = 1, Destination_Airport_ID_LGA =1, Carrier_Code_AA = 1,  Month_5 = 1)
Dep_delay_svm <- predict(mvm.fit_svm, data_svm)
Dep_delay_svm
dd <- read.csv("./Allegheny_County_Hydrology_Areas.csv")
dd <- read.csv("./Allegheny_County_Hydrology_Areas.csv")
dd <- read.csv("Allegheny_County_Hydrology_Areas.csv")
setwd("C:/Users/sunas/Desktop/Courses/R shiny/Project2_NaSu")
dd <- read.csv("C:/Users/sunas/Desktop/Courses/R shiny/Project2_NaSu/Allegheny_County_Hydrology_Areas.csv")
pal22 <- colorFactor(c("#8c510a","#bf812d","#dfc27d","#f6e8c3","#c7eae5","#80cdc1","#35978f","#01665e"),unique(FEATURECOD_column))
dd <- read.csv("C:/Users/sunas/Desktop/Courses/R shiny/Project2_NaSu/Allegheny_County_Hydrology_Areas.csv")
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = polygondata ,lng = ~SHAPE_area, lat = ~SHAPE_len, color = ~pal22(FEATURECOD))
pal22 <- colorFactor(c("#8c510a","#bf812d","#dfc27d","#f6e8c3","#c7eae5","#80cdc1","#35978f","#01665e"),unique(FEATURECOD_column))
dd <- read.csv("C:/Users/sunas/Desktop/Courses/R shiny/Project2_NaSu/Allegheny_County_Hydrology_Areas.csv")
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = dd ,lng = ~SHAPE_area, lat = ~SHAPE_len, color = ~pal22(FEATURECOD))
pal22 <- colorFactor(c("#8c510a","#bf812d","#dfc27d","#f6e8c3","#c7eae5","#80cdc1","#35978f","#01665e"),unique(FEATURECOD_column))
dd <- read.csv("C:/Users/sunas/Desktop/Courses/R shiny/Project2_NaSu/Allegheny_County_Hydrology_Areas.csv")
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = dd ,lng = ~SHAPE_len, lat = ~SHAPE_area, color = ~pal22(FEATURECOD))
dd <- readOGR("C:/Users/sunas/Desktop/Courses/R shiny/Project2_NaSu/Allegheny_County_Hydrology_Areas.shp", layer = "Allegheny_County_Hydrology_Areas.shp")
dd <- readOGR("./Allegheny_County_Hydrology_Areas.shp", layer = "Allegheny_County_Hydrology_Areas.shp")
dd <- readOGR("./Allegheny_County_Hydrology_Areas.shp", layer = "Allegheny_County_Hydrology_Areas.shp")
require(rgdal)
dd <- readOGR("./Allegheny_County_Hydrology_Areas.shp", layer = "Allegheny_County_Hydrology_Areas.shp")
ll <- readOGR("./Allegheny_County_Hydrology_Areas.shp", layer = "Allegheny_County_Hydrology_Areas.shp")
ll <- readOGR("./Allegheny_County_Hydrology_Areas.shp")
ll <- readOGR(dsn = "./Allegheny_County_Hydrology_Areas.shp", layer = "Allegheny_County_Hydrology_Areas.shp")
ll <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas.shp"), layer = "Allegheny_County_Hydrology_Areas.shp")
ll <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
ll
str(ll)
summary(ll)
ll <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll ,lng = ~SHAPE_len, lat = ~SHAPE_area, color = ~pal22(FEATURECOD))
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD))
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD))%>%
addLegend(position = "topright", pal = pal22, values = ~FEATURECOD)
unique(FEATURECOD_column)
class(unique(FEATURECOD_column))
pal22 <- colorFactor(c("#8c510a","#bf812d","#dfc27d","#f6e8c3","#c7eae5","#80cdc1","#35978f","#01665e"),c("0","410", "420", "430", "450","460", "470", "520"))
ll <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD))%>%
addLegend(position = "topright", pal = pal22, values = ~FEATURECOD)
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD))
addLegend(position = "topright", pal = pal22, values = ~FEATURECOD)
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD))
addLegend(data = ll, position = "topright", pal = pal22, values = ~FEATURECOD)
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD))  %>%
addLegend(data = ll, position = "topright", pal = pal22, values = ~FEATURECOD)
ee <- read.csv("./Allegheny_County_Dam_Locations.csv")
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD))  %>%
addLegend(data = ll, position = "topright", pal = pal22, values = ~FEATURECOD)
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(data = ee, position = "topright" , pal = pal311, values = ee$TYPE, title = "TYPE")
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD))  %>%
addLegend(data = ll, position = "topright", pal = pal22, values = ~FEATURECOD)
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(data = ee, position = "downright" , pal = pal311, values = ee$TYPE, title = "TYPE")
summary(ee)
head(ee)
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD))  %>%
addLegend(data = ll, position = "topright", pal = pal22, values = ~FEATURECOD)
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE))
addLegend(data = ee, position = "downright" , pal = pal311, values = ee$TYPE, title = "TYPE")
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD))
addLegend(data = ll, position = "topright", pal = pal22, values = ~FEATURECOD)
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE))
addLegend(data = ee, position = "bottomright" , pal = pal311, values = ee$TYPE, title = "TYPE")
ee <- read.csv("./Allegheny_County_Dam_Locations.csv")
ee <- readOGR(dsn = path.expand("./Allegheny_County_Dam_Locations"), layer = "Allegheny_County_Dam_Locations")
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD))
addLegend(data = ll, position = "topright", pal = pal22, values = ~FEATURECOD)
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE))
addLegend(data = ee, position = "bottomright" , pal = pal311, values = ee$TYPE, title = "TYPE")
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD)) %>%
addLegend(data = ll, position = "topright", pal = pal22, values = ~FEATURECOD)
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(data = ee, position = "bottomright" , pal = pal311, values = ee$TYPE, title = "TYPE")
summary(ee)
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD)) %>%
addLegend(data = ll, position = "topright", pal = pal22, values = ~FEATURECOD)
addCircleMarkers(data = ee, lng = ~coords.x1, lat = ~coords.x2, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(data = ee, position = "bottomright" , pal = pal311, values = ee$TYPE, title = "TYPE")
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD)) %>%
addLegend(data = ll, position = "topright", pal = pal22, values = ~FEATURECOD)
addCircleMarkers(data = ee, lng = ~x1, lat = ~x2, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(data = ee, position = "bottomright" , pal = pal311, values = ee$TYPE, title = "TYPE")
summary(ee)
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD)) %>%
addLegend(data = ll, position = "topright", pal = pal22, values = ~FEATURECOD)
addCircleMarkers(data = ee, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(data = ee, position = "bottomright" , pal = pal311, values = ee$TYPE, title = "TYPE")
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = ll , color = ~pal22(FEATURECOD)) %>%
addLegend(data = ll, position = "topright", pal = pal22, values = ~FEATURECOD)
addCircleMarkers(data = ee, lng = X, lat = Y, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(data = ee, position = "bottomright" , pal = pal311, values = ee$TYPE, title = "TYPE")
leaflet(data = ee) %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(data = ee, position = "bottomright" , pal = pal311, values = ee$TYPE, title = "TYPE")
addPolygons(data = ll , color = ~pal22(FEATURECOD)) %>%
addLegend(data = ll, position = "topright", pal = pal22, values = ~FEATURECOD)
leaflet(data = ee) %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(position = "bottomright" , pal = pal311, values = ee$TYPE, title = "TYPE")
addPolygons(data = ll , color = ~pal22(FEATURECOD)) %>%
addLegend(position = "topright", pal = pal22, values = ~FEATURECOD)
leaflet(data = ee) %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(position = "bottomright" , pal = pal311, values = ee$TYPE, title = "TYPE")
addPolygons(data = ll , color = ~pal22(FEATURECOD)) %>%
addLegend(position = "topright", pal = pal22, values = ~FEATURECOD)
leaflet(data = ee) %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(position = "bottomright" , pal = pal311, values = ee$TYPE, title = "TYPE")
addPolygons(data = ll , color = ~pal22(FEATURECOD)) %>%
addLegend(position = "topright", pal = pal22, values = ~FEATURECOD)
leaflet(data = ee) %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(position = "bottomright" , pal = pal311, values = ee$TYPE, title = "TYPE")
addPolygons(data = ll , color = ~pal22(FEATURECOD)) %>%
addLegend(position = "topright", pal = pal22, values = ~FEATURECOD)
leaflet(data = ee) %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(position = "bottomright" , pal = pal311, values = ee$TYPE, title = "TYPE")
addPolygons(data = ll , color = ~pal22(FEATURECOD)) %>%
addLegend(position = "topright", pal = pal22, values = ~FEATURECOD)
leaflet(data = ee) %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(position = "bottomright" , pal = pal311, values = ee$TYPE, title = "TYPE")%>%
addPolygons(data = ll , color = ~pal22(FEATURECOD)) %>%
addLegend(position = "topright", pal = pal22, values = ~FEATURECOD)%>%
leaflet(data = ee) %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(position = "bottomright" , pal = pal311, values = ee$TYPE, title = "TYPE")%>%
addPolygons(data = ll , color = ~pal22(FEATURECOD)) %>%
addLegend(position = "topright", pal = pal22, values = ~FEATURECOD)%>%
leaflet(data = ee) %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(position = "topright" , pal = pal311, values = ee$TYPE, title = "TYPE")%>%
addPolygons(data = ll , color = ~pal22(FEATURECOD)) %>%
addLegend(position = "bottomright", pal = pal22, values = ~FEATURECOD)%>%
leaflet(data = ee) %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addCircleMarkers(data = ee, lng = ~X, lat = ~Y, radius = 1.5, color = ~pal311(TYPE)) %>%
addLegend(data = ee, position = "topright" , pal = pal311, values = ee$TYPE, title = "TYPE")%>%
addPolygons(data = ll , color = ~pal22(FEATURECOD)) %>%
addLegend(data = ll,position = "bottomright", pal = pal22, values = ~FEATURECOD)
Hydrology_Areas <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
Hydrology_Areas <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
Hydrology_lines <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Lines"), layer = "Allegheny_County_Hydrology_Lines")
table(Hydrology_lines$FEATURECOD)
Hydrology_Areas <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolylons(data = Hydrology_Areas, color = ~pal22(FEATURECOD))%>%
addLegend(data = Hydrology_Areas,position = "bottomright", pal = pal22, values = ~FEATURECOD) %>%
Hydrology_Areas <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
table(Hydrology_Areas$FEATURECOD)
pal22 <- colorFactor(c("#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494"),c("0","410", "420", "430", "450","460", "470", "520"))
pal22 <- colorFactor(c("#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494"),c("0","410", "420", "430", "450","460", "470", "520"))
Hydrology_Areas <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
table(Hydrology_Areas$FEATURECOD)
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolylons(data = Hydrology_Areas, color = ~pal22(FEATURECOD))%>%
addLegend(data = Hydrology_Areas,position = "bottomright", pal = pal23, values = ~FEATURECOD) %>%
pal23 <- colorFactor(c("#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494"),c("0","410", "420", "430", "450","460", "470", "520"))
Hydrology_Areas <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
table(Hydrology_Areas$FEATURECOD)
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolylons(data = Hydrology_Areas, color = ~pal22(FEATURECOD))%>%
addLegend(data = Hydrology_Areas,position = "bottomright", pal = pal23, values = ~FEATURECOD) %>%
pal23 <- colorFactor(c("#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494"),c("0","410", "420", "430", "450","460", "470", "520"))
Hydrology_Areas <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
table(Hydrology_Areas$FEATURECOD)
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolylons(data = Hydrology_Areas, color = ~pal22(FEATURECOD))%>%
addLegend(data = Hydrology_Areas,position = "bottomright", pal = pal23, values = ~FEATURECOD)
pal23 <- colorFactor(c("#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494"),c("0","410", "420", "430", "450","460", "470", "520"))
Hydrology_Areas <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
table(Hydrology_Areas$FEATURECOD)
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolylon(data = Hydrology_Areas, color = ~pal22(FEATURECOD))%>%
addLegend(data = Hydrology_Areas,position = "bottomright", pal = pal23, values = ~FEATURECOD)
pal23 <- colorFactor(c("#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494"),c("0","410", "420", "430", "450","460", "470", "520"))
Hydrology_Areas <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
table(Hydrology_Areas$FEATURECOD)
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolygons(data = Hydrology_Areas, color = ~pal22(FEATURECOD))%>%
addLegend(data = Hydrology_Areas,position = "bottomright", pal = pal23, values = ~FEATURECOD)
pal23 <- colorFactor(c("#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494"),c("0","410", "420", "430", "450","460", "470", "520"))
Hydrology_Areas <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
table(Hydrology_Areas$FEATURECOD)
leaflet() %>%
addProviderTiles("OpenStreetMap.HOT") %>%
addPolylines(data = Hydrology_Areas, color = ~pal22(FEATURECOD))%>%
addLegend(data = Hydrology_Areas,position = "bottomright", pal = pal23, values = ~FEATURECOD)
Hydrology_Areas.load <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
class(Hydrology_Areas.load$SHAPE_area)
class(Hydrology_Areas.load$SHAPE_len)
Hydrology_Areas.load <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
areas_Input <- reactive({
# Building an IN selector
# TYPE_filter <- ifelse(length(input$TYPESelect) > 0,
#                         paste0("%20%22TYPE%22%20IN%20(%27", paste(input$TYPESelect, collapse = "%27,%27"),"%27)"),
#                         "")
# DAM_HEIGHT_filter <- ifelse(length(input$DAM_HEIGHTSelect) > 0,
#                           paste0("%20AND%20%22DAM_HEIGHT%22%20BETWEEN%20%27", paste(input$DAM_HEIGHTSelect, collapse = "%27AND%27"),"%27"),
#                           "")
# Build API Query with proper encodes
# url <- paste0("https://data.wprdc.org/api/action/datastore_search_sql?sql=SELECT%20*%20FROM%20%22e500cd8b-aa04-4845-a77f-c93b6dfa86b0%22%20WHERE",TYPE_filter,DAM_HEIGHT_filter)
#
# Load and clean data
# print(url)
Hydrology_Areas <-  Hydrology_Areas.load
if (length(input$FEATURECODSelect) > 0) {
Hydrology_Areas <- subset(Hydrology_Areas, FEATURECOD %in% input$FEATURECODSelect)
}
return(Hydrology_Areas)
})
Hydrology_Areas <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
setwd("C:/Users/sunas/Desktop/Courses/R shiny/Project2_NaSu")
Hydrology_Areas_list <- fromJSON("https://services1.arcgis.com/vdNDkVykv9vEWFX4/arcgis/rest/services/Hydrology_Areas/FeatureServer/0/query?where=1%3D1&outFields=*&outSR=4326&f=json")
head(Hydrology_Areas_list)
Hydrology_Areas_list <- fromJSON("https://services1.arcgis.com/vdNDkVykv9vEWFX4/arcgis/rest/services/Hydrology_Areas/FeatureServer/0/query?where=1%3D1&outFields=*&outSR=4326&f=json")
library(flexdashboard)
library(shiny)
library(reshape2)
library(plotly)
library(shinythemes)
library(ggplot2)
library(plyr)
library(httr)
library(jsonlite)
library(dplyr)
require(rgdal)
require(leaflet)
require(leaflet.extras)
require(readxl)
require(stringr)
library(jsonlite)
options(scipen = 4)
Hydrology_Areas_list <- fromJSON("https://services1.arcgis.com/vdNDkVykv9vEWFX4/arcgis/rest/services/Hydrology_Areas/FeatureServer/0/query?where=1%3D1&outFields=*&outSR=4326&f=json")
head(Hydrology_Areas_list)
head(Hydrology_Areas_list['SHAPE_area'])
head(Hydrology_Areas_list[SHAPE_area])
head(Hydrology_Areas_list['SHAPE_area'])
head(Hydrology_Areas_list$fileds)
head(Hydrology_Areas_list[fileds])
head(Hydrology_Areas_list[fields])
head(Hydrology_Areas_list['fields'])
head(Hydrology_Areas_list['fields'][5])
head(Hydrology_Areas_list['fields'][SHAPE_len])
head(Hydrology_Areas_list['fields']['SHAPE_len'])
Hydrology_Areas_list2 <- rjson::fromJSON(file="https://services1.arcgis.com/vdNDkVykv9vEWFX4/arcgis/rest/services/Hydrology_Areas/FeatureServer/0/query?where=1%3D1&outFields=*&outSR=4326&f=json")
head(Hydrology_Areas_list2)
head(Hydrology_Areas_list2['feilds'])
head(Hydrology_Areas_list2['feilds'][[5]])
View(ckanSQL)
ckanSQL <- function(url) {
# Clean the URL
url <- gsub(" ", "%20", url)
# Print URL for debugging
print(url)
# Make the Request
r <- GET(url)
# Extract Content
c <- content(r, "text")
# Basic gsub to make NA's consistent with R
json <- gsub('NaN', 'NA', c, perl = TRUE)
# Create Dataframe
data.frame(jsonlite::fromJSON(json)$result$records)
}
ckanUniques <- function(id, field) {
url <- paste0("https://data.wprdc.org/api/action/datastore_search_sql?sql=SELECT%20DISTINCT(%22", field, "%22)%20from%20%22", id, "%22")
c(ckanSQL(url))
}
# Get distinct choices for input select
TYPE_Choice <- sort(ckanUniques("e500cd8b-aa04-4845-a77f-c93b6dfa86b0", "TYPE")$TYPE)
TYPE_Choice
DAM_HEIGHT_Choice <- sort(ckanUniques("e500cd8b-aa04-4845-a77f-c93b6dfa86b0", "DAM_HEIGHT")$DAM_HEIGHT)
DAM_HEIGHT_Choice <- as.numeric(DAM_HEIGHT_Choice)
DAM_NAME_Choice <- sort(ckanUniques("e500cd8b-aa04-4845-a77f-c93b6dfa86b0", "DAM_NAME")$DAM_NAME)
damInput <- reactive({
# Building selectors for inputs
TYPE_filter <- ifelse(length(input$TYPESelect) > 0,
paste0("%20%22TYPE%22%20IN%20(%27", paste(input$TYPESelect, collapse = "%27,%27"),"%27)"),"")
DAM_HEIGHT_filter <- ifelse(length(input$DAM_HEIGHTSelect) > 0,
paste0("%20AND%20%22DAM_HEIGHT%22%20BETWEEN%20%27", paste(input$DAM_HEIGHTSelect, collapse = "%27AND%27"),"%27"),"")
# Since this varible has some values with symbols ' and #, I replace them to readable for sql and connect to API
fixed_variableinput <- input$DAM_NAMESelect
fixed_variableinput <- gsub("'", "''", fixed_variableinput)
fixed_variableinput <- gsub("#", "%23", fixed_variableinput)
DAM_NAME_filter <- ifelse(length(fixed_variableinput) > 0,
paste0("%20AND%20%22DAM_NAME%22%20IN%20(%27", paste(fixed_variableinput, collapse = "%27,%27"),"%27)"),"")
# Build API Query with proper encodes
url <- paste0("https://data.wprdc.org/api/action/datastore_search_sql?sql=SELECT%20*%20FROM%20%22e500cd8b-aa04-4845-a77f-c93b6dfa86b0%22%20WHERE",
TYPE_filter,
DAM_HEIGHT_filter,
DAM_NAME_filter)
# Load and clean data
print(url)
data_get <-  ckanSQL(url) %>%
mutate(X = as.numeric(X),
Y = as.numeric(Y),
DAM_HEIGHT = as.numeric(DAM_HEIGHT),
TYPE = mapvalues(TYPE,c(""),c("UNKNOWN")))
return(data_get)
})
##load shapefile to get the polygons on map
#Hydrology_Areas.load <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
##Buile interactive data for polygons map
url2 <- paste0("https://services1.arcgis.com/vdNDkVykv9vEWFX4/arcgis/rest/services/Hydrology_Areas/FeatureServer/0/query?where=1%3D1&outFields=*&outSR=4326&f=geojson")
data_11 <-  ckanSQL(url2)
head(data_11)
Hydrology_Areas_list2 <- rjson::fromJSON(file="https://services1.arcgis.com/vdNDkVykv9vEWFX4/arcgis/rest/services/Hydrology_Areas/FeatureServer/0/query?where=1%3D1&outFields=*&outSR=4326&f=json")
Hydrology_Areas_list <- fromJSON("https://services1.arcgis.com/vdNDkVykv9vEWFX4/arcgis/rest/services/Hydrology_Areas/FeatureServer/0/query?where=1%3D1&outFields=*&outSR=4326&f=json")
head(Hydrology_Areas_list2['feilds'][[5]])
head(Hydrology_Areas_list)
url2 <- paste0("https://services1.arcgis.com/vdNDkVykv9vEWFX4/arcgis/rest/services/Hydrology_Areas/FeatureServer/0/query?where=1%3D1&outFields=*&outSR=4326&f=geojson")
data_11 <-  ckanSQL(url2)
data_11 <-  ckanSQL(url2)
head(data_11)
head(data_11)
Hydrology_Areas_list2$fields
Hydrology_Areas_list2$fields$names
Hydrology_Areas_list2 <- rjson::fromJSON(file="https://services1.arcgis.com/vdNDkVykv9vEWFX4/arcgis/rest/services/Hydrology_Areas/FeatureServer/0/query?where=1%3D1&outFields=*&outSR=4326&f=json")
Hydrology_Areas_list2 <- rjson::fromJSON(file="https://services1.arcgis.com/vdNDkVykv9vEWFX4/arcgis/rest/services/Hydrology_Areas/FeatureServer/0/query?where=1%3D1&outFields=*&outSR=4326&f=json")
head(Hydrology_Areas_list2$fields$names)
head(Hydrology_Areas_list2$features)
head(Hydrology_Areas_list2$features$attributes)
head(Hydrology_Areas_list2$features[1])
head(Hydrology_Areas_list2$features[10])
head(Hydrology_Areas_list2$features$attributes$SHAPE_area)
head(Hydrology_Areas_list2$features$$SHAPE_area)
head(Hydrology_Areas_list2$features$SHAPE_area)
head(Hydrology_Areas_list2$features$name)
head(Hydrology_Areas_list2$features)
head(Hydrology_Areas_list2$geometryType)
head(Hydrology_Areas_list2$fields)
head(Hydrology_Areas_list2$features)
head(Hydrology_Areas_list2$features['SHAPE_area'])
head(Hydrology_Areas_list2$features['attributes'])
head(Hydrology_Areas_list2$features)
head(Hydrology_Areas_list2$features[[1]])
head(Hydrology_Areas_list2$features[[1]])
head(Hydrology_Areas_list2$features[[1]][1])
head(Hydrology_Areas_list2$features[[1]][1][1])
head(Hydrology_Areas_list2$features[[1]])
head(Hydrology_Areas_list2$features[[1]]$attributes)
head(Hydrology_Areas_list2$features[[1]]$attributes$SHAPE_area)
head(Hydrology_Areas_list2$features[[1]]$attributes$SHAPE_area)
head(Hydrology_Areas_list2$features[[1]]$attributes)
Hydrology_Areas_list2$features[[1]]$attributes$SHAPE_area
Hydrology_Areas_list2$features[[1]]$attributes$SHAPE_len
length(Hydrology_Areas_list2$features)
Hydrology_Areas_list2 <- rjson::fromJSON(file="https://services1.arcgis.com/vdNDkVykv9vEWFX4/arcgis/rest/services/Hydrology_Areas/FeatureServer/0/query?where=1%3D1&outFields=*&outSR=4326&f=json")
Hydrology_Areas_list2 <- rjson::fromJSON(file="https://services1.arcgis.com/vdNDkVykv9vEWFX4/arcgis/rest/services/Hydrology_Areas/FeatureServer/0/query?where=1%3D1&outFields=*&outSR=4326&f=json")
SHAPE_area_list <- NULL
SHAPE_area_list <- NULL
SHAPE_len_list <- NULL
for (n in (1:length(Hydrology_Areas_list2$features))){
SHAPE_area_list <- append(SHAPE_area_list, Hydrology_Areas_list2$features[[n]]$attributes$SHAPE_area)
SHAPE_len_list <- append(SHAPE_len_list, Hydrology_Areas_list2$features[[n]]$attributes$SHAPE_len)
}
SHAPE_area_list
FID_list <- NULL
len
SHAPE_area_list <- NULL
FID_list <- NULL
SHAPE_area_list <- NULL
SHAPE_len_list <- NULL
FEATURECOD_list <- NULL
for (n in (1:length(Hydrology_Areas_list$features))){
FID_list <- append(FID_list, Hydrology_Areas_list$features[[n]]$attributes$FID)
SHAPE_area_list <- append(SHAPE_area_list, Hydrology_Areas_list$features[[n]]$attributes$SHAPE_area)
SHAPE_len_list <- append(SHAPE_len_list, Hydrology_Areas_list$features[[n]]$attributes$SHAPE_len)
FEATURECOD_list <- append(FEATURECOD_list, Hydrology_Areas_list$features[[n]]$attributes$FEATURECOD)
}
Hydrology_Areas <- dataframe(FID = FID_list, SHAPE_area = SHAPE_area_list, SHAPE_len = SHAPE_len_list, FEATURECOD = FEATURECOD_list)
Hydrology_Areas <- data.frame(FID = FID_list, SHAPE_area = SHAPE_area_list, SHAPE_len = SHAPE_len_list, FEATURECOD = FEATURECOD_list)
Hydrology_Areas_list <- rjson::fromJSON(file="https://services1.arcgis.com/vdNDkVykv9vEWFX4/arcgis/rest/services/Hydrology_Areas/FeatureServer/0/query?where=1%3D1&outFields=*&outSR=4326&f=json")
FID_list <- NULL
SHAPE_area_list <- NULL
SHAPE_len_list <- NULL
FEATURECOD_list <- NULL
for (n in (1:length(Hydrology_Areas_list$features))){
FID_list <- append(FID_list, Hydrology_Areas_list$features[[n]]$attributes$FID)
SHAPE_area_list <- append(SHAPE_area_list, Hydrology_Areas_list$features[[n]]$attributes$SHAPE_area)
SHAPE_len_list <- append(SHAPE_len_list, Hydrology_Areas_list$features[[n]]$attributes$SHAPE_len)
FEATURECOD_list <- append(FEATURECOD_list, Hydrology_Areas_list$features[[n]]$attributes$FEATURECOD)
}
Hydrology_Areas <- data.frame(FID = FID_list, SHAPE_area = SHAPE_area_list, SHAPE_len = SHAPE_len_list, FEATURECOD = FEATURECOD_list)
View(Hydrology_Areas)
cds.load <- readOGR("./Allegheny_County_Hydrology_Areas.shp", layer = "Allegheny_County_Hydrology_Areas")
setwd("C:/Users/sunas/Desktop/Courses/R shiny/Project2_NaSu")
cds.load <- readOGR("C:/Users/sunas/Desktop/Courses/R shiny/Project2_NaSu/Allegheny_County_Hydrology_Areas.shp", layer = "Allegheny_County_Hydrology_Areas")
Hydrology_Areas.load <- readOGR(dsn = path.expand("./Allegheny_County_Hydrology_Areas"), layer = "Allegheny_County_Hydrology_Areas")
Hydrology_Areas <- readOGR('~/Allegheny_County_Hydrology_Areas.geojson')
Hydrology_Areas <- readOGR('./Allegheny_County_Hydrology_Areas.geojson')
